unit UnitMain;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Grids, DateUtils, Vcl.FileCtrl, ActiveX, System.Win.ComObj,
  Vcl.Samples.Spin;

type
  TFormMain = class(TForm)
    buttonCheck: TButton;
    labelHelp: TLabel;
    comboboxSelectMO: TComboBox;
    labelSelectMo: TLabel;
    labelSelectDirectory: TLabel;
    editSelectDirectory: TEdit;
    buttonSelectDirectory: TButton;
    groupboxSelectMO: TGroupBox;
    groupboxSelectDirectory: TGroupBox;
    LabelSelectMonth: TLabel;
    comboboxSelectMonth: TComboBox;
    SpinEditYear: TSpinEdit;
    stringgridMails: TStringGrid;
    procedure FormCreate(Sender: TObject);
    procedure buttonSelectDirectoryClick(Sender: TObject);
    procedure buttonCheckClick(Sender: TObject);
    procedure comboboxSelectMonthSelect(Sender: TObject);
    procedure SpinEditYearChange(Sender: TObject);
    procedure stringgridMailsMouseEnter(Sender: TObject);
    procedure stringgridMailsDrawCell(Sender: TObject; ACol, ARow: Integer;
      Rect: TRect; State: TGridDrawState);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
  private
    { Private declarations }
  public
    function correctPath(inputDirectory: string): string;
    function checkExcelInstall: boolean;

    procedure searchMails(inputDirectoryArchive: string; //Внутри для отслеживания писем есть папка Archive.
                                                         //Её и нужно указывать для поиска писем.
                          inputYear, inputMonth: string;
                          inputCodeMO: string);
  end;

TMail = class(TObject)
  number: integer; //Номер по порядку
  codeMO: string;
  isSent: boolean;
  month: string;
  fileName: string;
  fileDateTime: string;
end;

var
  FormMain: TFormMain;

var
  directoryRoot, directoryArchive: string;
  listCodeMO: TStringList;
  selectedNumberMonth, selectedYear: integer;
  selectedMonth: string;
  imgMailSent, imgMailNotSent: TPicture;
  mails: array of TMail;
  indexMails: integer;
const
  ALLMO = 0;
  ALLMONTH = 0;

implementation

{$R *.dfm}

procedure TFormMain.FormCreate(Sender: TObject);
var excelCodeMO: variant;
    i, lastRow: integer;
begin
  stringgridMails.RowCount := 2; //Определяем количество строк StringGrid
                                 //равное количеству МО из Excel-документа
  stringgridMails.FixedRows := 1; //Первая строка – заголовок
  stringgridMails.Cells[0,0] := 'Код МО:';
  stringgridMails.Cells[2,0] := 'Месяц отправки:';
  stringgridMails.Cells[3,0] := 'Имя файла:';
  stringgridMails.Cells[4,0] := 'Дата изменения файла:';
  imgMailSent := TPicture.Create;
  imgMailNotSent := TPicture.Create;
  imgMailSent.LoadFromFile(ExtractFilePath(ParamStr(0))+'Icons\mailSent32px.bmp');
  imgMailNotSent.LoadFromFile(ExtractFilePath(ParamStr(0))+'Icons\mailNotSent32px.bmp');
  stringgridMails.ColWidths[1] := 36;
  stringgridMails.DefaultRowHeight := 32;

  listCodeMo := TStringList.Create;
  comboboxSelectMo.ItemIndex := ALLMO;
  if FileExists(ExtractFilePath(ParamStr(0))+'codeMO.xls') = True then
    begin
      excelCodeMO := CreateOleObject('Excel.Application');
      try
        excelCodeMO.Workbooks.Open(ExtractFilePath(ParamStr(0))+'codeMO.xls');
        lastRow := excelCodeMO.WorkSheets[1].UsedRange.Rows.Count;
        for i := 2 to lastRow do
          begin
            listCodeMO.Add(VarToStr(excelCodeMO.Range['A'+IntToStr(i)]));
            comboboxSelectMO.Items[i-1] := listCodeMO[i-2] + ' – ' + VarToStr(excelCodeMO.Range['B'+IntToStr(i)]);
          end;

        excelCodeMO.DisplayAlerts := False; //Отключаем оповещение, чтобы, когда закрывался Excel-файл,
                                            //не спрашивалось сохранить ли файл.
      finally
        excelCodeMO.Quit;
      end;
    end
  else
    ShowMessage('В папке с программой отсутствует Excel-файл "codeMO.xls". Это справочник с больницами. Без него программа работать не будет');

  selectedYear := YearOf(Date);
  spineditYear.Value := selectedYear;
  selectedNumberMonth := MonthOf(Date);
  comboboxSelectMonth.ItemIndex := selectedNumberMonth;
  case selectedNumberMonth of
    1 : selectedMonth := 'Январь';
    2 : selectedMonth := 'Февраль';
    3 : selectedMonth := 'Март';
    4 : selectedMonth := 'Апрель';
    5 : selectedMonth := 'Май';
    6 : selectedMonth := 'Июнь';
    7 : selectedMonth := 'Июль';
    8 : selectedMonth := 'Август';
    9 : selectedMonth := 'Сентябрь';
    10 : selectedMonth := 'Октябрь';
    11 : selectedMonth := 'Ноябрь';
    12 : selectedMonth := 'Декабрь';
  end;
  labelHelp.Caption := 'Письма за месяц ' + selectedMonth + ' ' + IntToStr(selectedYear) + ' года:';

  directoryRoot := correctPath(editSelectDirectory.Text);
  directoryArchive := directoryRoot + 'Archive\';
end;

procedure TFormMain.buttonCheckClick(Sender: TObject);
var searchResult: TSearchRec;
    i, j, monthNumber, indexMO: integer;
    test1, test2, test3: string;
begin
  buttonCheck.Enabled := false;

  directoryRoot := correctPath(editSelectDirectory.Text);
  if System.SysUtils.DirectoryExists(DirectoryRoot) = False then
    ShowMessage('Проверьте папку для мониторинга писем. Программа такой папки не нашла.')
  else
  if checkExcelInstall = False then
    ShowMessage('На вашем компьютере не установлен Excel.')
  else
  if FileExists(ExtractFilePath(ParamStr(0))+'codeMO.xls') = False then
    ShowMessage('В папке с программой отсутствует Excel-файл "codeMO.xls". Это справочник с больницами. Без него программа работать не будет.');
  if System.SysUtils.DirectoryExists(directoryArchive) = False then
    ShowMessage('Отсутствует папка "Archive" в директории ' + directoryRoot + ', в которой хрянятся отправленные письма.')
  else
    begin
      //Очищаем массив
      if Length(mails) > 0 then
        begin
          for indexMails := 0 to High(mails) do
            begin
              mails[indexMails].Free;
            end;
        end;
      SetLength(mails, 0);
      indexMails := 0;
      //Очищаем StringGrid
      for i := 1 to stringgridMails.RowCount-1 do
        begin
          stringgridMails.Rows[i].Clear;
        end;
      stringgridMails.RowCount := 2;
      stringgridMails.FixedRows := 1; //Первая строка – заголовок.
                                      //Не может быть меньше общего количества строк.
                                      //Поэтому RowCount должен быть хотя бы 2.
      j := 0;
      IF comboboxSelectMO.ItemIndex = ALLMO THEN
        begin
          for indexMO := 0 to listCodeMO.Count-1 do
            begin
              if comboboxSelectMonth.ItemIndex = ALLMONTH then
                begin
                  for monthNumber := 1 to comboboxSelectMonth.Items.Count-1 do
                    searchMails(directoryArchive, IntToStr(selectedYear), comboboxSelectMonth.Items[monthNumber], listCodeMO[indexMO]);
                end
              else
                searchMails(directoryArchive, IntToStr(selectedYear), comboboxSelectMonth.Text, listCodeMO[indexMO]);
            end;
        end
      ELSE
        begin
          if comboboxSelectMonth.ItemIndex = ALLMONTH then
            begin
              for monthNumber := 1 to comboboxSelectMonth.Items.Count-1 do
                searchMails(directoryArchive, IntToStr(selectedYear), comboboxSelectMonth.Items[monthNumber], listCodeMO[comboboxSelectMO.ItemIndex-1]);
            end
          else
            searchMails(directoryArchive, IntToStr(selectedYear), comboboxSelectMonth.Text, listCodeMO[comboboxSelectMO.ItemIndex-1]);
        end;

      //Из массива передаём значения в StringGrid
      stringgridMails.RowCount := Length(mails)+1; //+1, чтобы оставить место для заголовка
      for i := 0 to High(mails) do
        begin
          stringgridMails.Cells[0, mails[i].number] := mails[i].codeMO;
          stringgridMails.Cells[2, mails[i].number] := mails[i].month;
          stringgridMails.Cells[3, mails[i].number] := mails[i].fileName;
          stringgridMails.Cells[4, mails[i].number] := mails[i].fileDateTime;
        end;
    end;

  buttonCheck.Enabled := true;
end;

procedure TFormMain.stringgridMailsDrawCell(Sender: TObject; ACol,
  ARow: Integer; Rect: TRect; State: TGridDrawState);
begin
  {if (Length(mails) > 0) and (ACol = 1) and (ARow = mails[ARow-1].number) and (mails[ARow-1].isSent = True) then
    stringgridMails.Canvas.StretchDraw(Rect, imgMailSent.Graphic);
  if (Length(mails) > 0) and (ACol = 1) and (ARow = mails[ARow-1].number) and (mails[ARow-1].isSent = False) then
    stringgridMails.Canvas.StretchDraw(Rect, imgMailNotSent.Graphic);}
end;

procedure TFormMain.searchMails(inputDirectoryArchive, inputYear, inputMonth, inputCodeMO: string);
var searchResult: TSearchRec;
begin
  if FindFirst(inputDirectoryArchive + inputYear + '\' + inputMonth + '\*' + inputCodeMO + '*', faNormal, searchResult) = 0 then
    begin
      repeat
        SetLength(mails, Length(mails)+1);
        mails[indexMails] := TMail.Create;

        mails[indexMails].number := IndexMails + 1;
        mails[indexMails].codeMO := inputCodeMO;
        mails[indexMails].isSent := True;
        mails[indexMails].month := inputMonth;
        mails[indexMails].fileDateTime := DateTimeToStr(FileDateToDateTime(searchResult.Time)); //Время изменения файла возвращается
                                                                                                        //в DOS-формате(Integer)
        mails[indexMails].fileName := searchResult.Name;
        indexMails := IndexMails + 1;
      until FindNext(searchResult) <> 0;
      FindClose(searchResult);
    end
  else
    begin
      SetLength(mails, Length(mails)+1);
      mails[indexMails] := TMail.Create;

      mails[indexMails].number := IndexMails + 1;
      mails[indexMails].codeMO := inputCodeMO;
      mails[indexMails].isSent := False;
      mails[indexMails].month := inputMonth;

      indexMails := IndexMails + 1;
    end;
end;

procedure TFormMain.SpinEditYearChange(Sender: TObject);
begin
  selectedYear := spineditYear.Value;
  if selectedNumberMonth = 0 then
    labelHelp.Caption := 'Письма за все месяцы' + ' ' + IntToStr(selectedYear) + ' года:'
  else
    labelHelp.Caption := 'Письма за месяц ' + selectedMonth + ' ' + IntToStr(selectedYear) + ' года:';
end;

procedure TFormMain.comboboxSelectMonthSelect(Sender: TObject);
begin
  selectedNumberMonth := comboboxSelectMonth.ItemIndex;
  case selectedNumberMonth of
    1 : selectedMonth := 'Январь';
    2 : selectedMonth := 'Февраль';
    3 : selectedMonth := 'Март';
    4 : selectedMonth := 'Апрель';
    5 : selectedMonth := 'Май';
    6 : selectedMonth := 'Июнь';
    7 : selectedMonth := 'Июль';
    8 : selectedMonth := 'Август';
    9 : selectedMonth := 'Сентябрь';
    10 : selectedMonth := 'Октябрь';
    11 : selectedMonth := 'Ноябрь';
    12 : selectedMonth := 'Декабрь';
  else selectedMonth := 'Все месяцы';
  end;
  if selectedNumberMonth = 0 then
    labelHelp.Caption := 'Письма за все месяцы' + ' ' + IntToStr(selectedYear) + ' года:'
  else
    labelHelp.Caption := 'Письма за месяц ' + selectedMonth + ' ' + IntToStr(selectedYear) + ' года:';
end;

procedure TFormMain.buttonSelectDirectoryClick(Sender: TObject);
begin
  if SelectDirectory('Выберите папку для работы Автопроцессинга:', '', directoryRoot, [sdNewFolder, sdShowShares, sdNewUI, sdValidateDir]) then
    editSelectDirectory.Text := directoryRoot;
end;

function TFormMain.correctPath(inputDirectory: string): string;
begin
  if inputDirectory = '' then
    Result := ''
  else
    begin
      inputDirectory := Trim(inputDirectory);

      if Pos('/', inputDirectory) <> 0 then
        begin
          inputDirectory := StringReplace(inputDirectory, '/', '\', [rfReplaceAll]);
        end;

      if inputDirectory[length(inputDirectory)] <> '\' then
        Result := inputDirectory + '\'
      else
        Result := inputDirectory;
    end;
end;

function TFormMain.checkExcelInstall;
var ClassID: TCLSID;
    HRES: HRESULT;
begin
  HRES := CLSIDFromProgId( PWideChar(WideString('Excel.Application')), ClassID );
  if HRES = S_OK then
    result := true
  else
    result := false;
end;

procedure TFormMain.stringgridMailsMouseEnter(Sender: TObject);
begin
  stringgridMails.SetFocus;
end;

procedure TFormMain.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  imgMailSent.Free;
  imgMailNotSent.Free;
  listCodeMO.Free;
  //Очищаем массив
  if Length(mails) > 0 then
    begin
      for indexMails := 0 to High(mails) do
        begin
          mails[indexMails].Free;
        end;
    end;
  SetLength(mails, 0);
end;

end.
