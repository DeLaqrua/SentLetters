unit UnitMain;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Grids, DateUtils, Vcl.FileCtrl, ActiveX, ComObj;

type
  TFormMain = class(TForm)
    buttonCheck: TButton;
    labelPrevious: TLabel;
    labelCurrent: TLabel;
    labelPreviousMonth: TLabel;
    LabelCurrentMonth: TLabel;
    drawgridPreviousMonth: TDrawGrid;
    comboboxSelectMO: TComboBox;
    drawgridCurrentMonth: TDrawGrid;
    labelSelectMo: TLabel;
    labelSelectDirectory: TLabel;
    editSelectDirectory: TEdit;
    buttonSelectDirectory: TButton;
    groupboxSelectMO: TGroupBox;
    groupboxSelectDirectory: TGroupBox;
    procedure FormCreate(Sender: TObject);
    procedure buttonSelectDirectoryClick(Sender: TObject);
    procedure buttonCheckClick(Sender: TObject);
  private
    { Private declarations }
  public
    function correctPath(inputDirectory: string): string;
    function checkExcelInstall: boolean;
  end;

var
  FormMain: TFormMain;

var
  directoryRoot: string;
const
  ALLMO = 0;

implementation

{$R *.dfm}

procedure TFormMain.FormCreate(Sender: TObject);
var currentMonth, previousMonth: string;
    excelCodeMO: variant;
begin
  comboboxSelectMo.ItemIndex := ALLMO;
  if FileExists(ExtractFilePath(ParamStr(0))+'codeMO.xls') = True then
    begin
      excelCodeMO := CreateOleObject('Excel.Application');
      try
        excelCodeMO.Workbooks.Open(ExtractFilePath(ParamStr(0))+'codeMO.xls');

        excelCodeMO.Range('A2').Value := comboboxSelectMo.Items[1];

        excelCodeMO.DisplayAlerts := False; //Отключаем оповещение, чтобы, когда закрывался Excel-файл,
                                            //не спрашивалось сохранить ли файл.
      finally
        excelCodeMO.Quit;
      end;
    end
  else
    ShowMessage('В папке с программой отсутствует Excel-файл "codeMO.xls". Это справочник с больницами. Без него программа работать не будет');

  case MonthOf(IncMonth(Date, -1)) of
    1 : previousMonth := 'Январь';
    2 : previousMonth := 'Февраль';
    3 : previousMonth := 'Март';
    4 : previousMonth := 'Апрель';
    5 : previousMonth := 'Май';
    6 : previousMonth := 'Июнь';
    7 : previousMonth := 'Июль';
    8 : previousMonth := 'Август';
    9 : previousMonth := 'Сентябрь';
    10 : previousMonth := 'Октябрь';
    11 : previousMonth := 'Ноябрь';
    12 : previousMonth := 'Декабрь';
  else previousMonth := 'Неизвестный месяц оО';
  end;
  labelPreviousMonth.Caption := '(' + previousMonth + ')';

  case MonthOf(Date) of
    1 : currentMonth := 'Январь';
    2 : currentMonth := 'Февраль';
    3 : currentMonth := 'Март';
    4 : currentMonth := 'Апрель';
    5 : currentMonth := 'Май';
    6 : currentMonth := 'Июнь';
    7 : currentMonth := 'Июль';
    8 : currentMonth := 'Август';
    9 : currentMonth := 'Сентябрь';
    10 : currentMonth := 'Октябрь';
    11 : currentMonth := 'Ноябрь';
    12 : currentMonth := 'Декабрь';
  else currentMonth := 'Неизвестный месяц оО';
  end;
  labelCurrentMonth.Caption := '(' + currentMonth + ')';

  directoryRoot := correctPath(editSelectDirectory.Text);
end;

procedure TFormMain.buttonCheckClick(Sender: TObject);
begin
  buttonCheck.Enabled := false;
  directoryRoot := correctPath(editSelectDirectory.Text);
  if System.SysUtils.DirectoryExists(DirectoryRoot) = False then
    ShowMessage('Проверьте папку для мониторинга писем. Программа такой папки не нашла.');
  if checkExcelInstall = False then
    ShowMessage('На вашем компьютере не установлен Excel.');
  if FileExists(ExtractFilePath(ParamStr(0))+'codeMO.xls') = False then
    ShowMessage('В папке с программой отсутствует Excel-файл "codeMO.xls". Это справочник с больницами. Без него программа работать не будет');
  buttonCheck.Enabled := true;
end;

procedure TFormMain.buttonSelectDirectoryClick(Sender: TObject);
begin
  if SelectDirectory('Выберите папку для работы Автопроцессинга:', '', directoryRoot, [sdNewFolder, sdShowShares, sdNewUI, sdValidateDir]) then
    editSelectDirectory.Text := directoryRoot;
end;

function TFormMain.correctPath(inputDirectory: string): string;
begin
  if inputDirectory = '' then
    Result := ''
  else
    begin
      inputDirectory := Trim(inputDirectory);

      if Pos('/', inputDirectory) <> 0 then
        begin
          inputDirectory := StringReplace(inputDirectory, '/', '\', [rfReplaceAll]);
        end;

      if inputDirectory[length(inputDirectory)] <> '\' then
        Result := inputDirectory + '\'
      else
        Result := inputDirectory;
    end;
end;

function TFormMain.checkExcelInstall;
var ClassID: TCLSID;
    HRES: HRESULT;
begin
  HRES := CLSIDFromProgId( PWideChar(WideString('Excel.Application')), ClassID );
  if HRES = S_OK then
    result := true
  else
    result := false;
end;

end.
